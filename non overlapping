import sys
class Solution:
    def minSumOfLengths(self, arr, target):
        def comp(x):
            return x[2], x[0], x[1]
        def check(lengths):
            if len(lengths) < 2:
                return sys.maxsize, sys.maxsize, lengths
            m1, m2 = sys.maxsize, sys.maxsize        
            lengths = sorted(lengths, key=comp)
            m1 = lengths[0][2]
            for i in range(1, len(lengths)):
                if not(lengths[i][0] < lengths[0][1] < lengths[i][1] or (lengths[i][0] < lengths[0][0] < lengths[i][1])):
                    m2 = lengths[i][2]
                    break
            if m1 == sys.maxsize or m2 == sys.maxsize:
                return m1, m2, lengths
            return m1, m2, lengths
        preSum = [0]*(len(arr)+1)
        for i in range(len(arr)):
            preSum[i+1] += (preSum[i] + arr[i])
        m1, m2 = sys.maxsize, sys.maxsize
        sums = {}
        minVal = sys.maxsize
        lengths = []
        for i in range(len(preSum)):
            sums[preSum[i]] = i
            if preSum[i]-target in sums:
                lengths.append((sums[preSum[i]-target], i, i-sums[preSum[i]-target]))
                minVal = min(minVal, i-sums[preSum[i]-target])

        m1, m2, lengths = check(lengths)  
        
        if m1 == sys.maxsize or m2 == sys.maxsize:
            return -1
        return m1+m2
